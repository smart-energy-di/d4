version: "3.7"
# created with cookiecutter for project '{{ cookiecutter.project_name }}'


{%- if ( (cookiecutter.enable_postgres == "y") or (cookiecutter.enable_mq == "y") or (cookiecutter.enable_mq_db == "y") ) %}
volumes:
  {%- if cookiecutter.enable_postgres == "y" %}
  local_postgres_data: {}
  local_postgres_data_backups: {}
  {%- endif %}
  {%- if cookiecutter.enable_mq == "y" %}
  local_mq_data: {}
  local_mq_log: {}
  {%- endif %}
  {%- if cookiecutter.enable_mq_db == "y" %}
  local_mq_db_data: {}
  {%- endif %}
{%- endif %}


services:

{%- if cookiecutter.enable_test_keycloak == "y" %}
# ------------------------------------------------------------------------
  keycloak:
    image: jboss/keycloak:latest
    ports:
      - "${D4SERVICE_OAUTH2_PORT}:${D4SERVICE_OAUTH2_PORT}"
    environment:
      - DB_VENDOR=h2
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
      - KEYCLOAK_IMPORT=/tmp/realm.json
      - KEYCLOAK_LOGLEVEL=INFO
    volumes:
      - ./compose/local/keycloak/realm.json:/tmp/realm.json

{%- endif %}




{%- if cookiecutter.enable_test_opa == "y" %}
# ------------------------------------------------------------------------
  opa:
    image: openpolicyagent/opa:latest
    ports:
      - "${D4SERVICE_OPA_PORT}:${D4SERVICE_OPA_PORT}"
    depends_on:
      - keycloak
    command:
      - "run"
      - "--server"
      - "--log-level=debug"
      - "--log-format=json"
      - "/policy/test.rego"
    volumes:
      - ./compose/local/opa/policy:/policy
{%- endif %}



{%- if cookiecutter.enable_adapter == "y" %}
# ---------------------------------------------------------------------------
  adapter:
    image: '${DOCKER_IMAGE_ADAPTER}'
    build:
      context: ./adapter
      dockerfile: ../compose/local/adapter/python3.9-slim.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    environment:
      - LOG_LEVEL=debug
      - D4SERVICE_OAUTH2_URI=http://keycloak:8080
      - D4SERVICE_OAUTH2_PORT=8080
      - D4SERVICE_OAUTH2_CLIENT_ID=d4-client
      - D4SERVICE_OAUTH2_CLIENT_SECRET=1f02bb76-eb58-40e2-928d-13f5c35794c1
      - D4SERVICE_OAUTH2_ISSUER=http://keycloak:8080/auth/realms/{{cookiecutter.d4service_oauth2_auth_realm}}
      - D4SERVICE_OAUTH2_AUTH_ENDPOINT=http://127.0.0.1:8080/auth/realms/{{cookiecutter.d4service_oauth2_auth_realm}}/protocol/openid-connect/auth
      - D4SERVICE_OAUTH2_TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/{{cookiecutter.d4service_oauth2_auth_realm}}/protocol/openid-connect/token
      - D4SERVICE_OAUTH2_JWKS_URI=http://keycloak:8080/auth/realms/{{cookiecutter.d4service_oauth2_auth_realm}}/protocol/openid-connect/certs
      - D4SERVICE_OAUTH2_USERINFO_ENDPOINT=http://keycloak:8080/auth/realms/{{cookiecutter.d4service_oauth2_auth_realm}}/protocol/openid-connect/userinfo
      - D4SERVICE_OPA_URI=http://opa:8181
      - D4SERVICE_OPA_PORT=8181
      - D4SERVICE_ADAPTER_URI=http://127.0.0.1:{{cookiecutter.d4service_adapter_port}}
      # Allow explicit env var override for tests
    depends_on:
      - opa
    ports:
      - "${D4SERVICE_ADAPTER_PORT}:${D4SERVICE_ADAPTER_PORT}"
{%- endif %}



{%- if cookiecutter.enable_cache == "y" %}
# ---------------------------------------------------------------------------
  cache:
    image: '${DOCKER_IMAGE_CACHE}'
    build:
      context: ./cache
      dockerfile: ../compose/local/cache/python3.9-slim.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    env_file:
      - envs/local/cache
    environment:
      - LOG_LEVEL=debug
      - D4SERVICE_OAUTH2_URI=http://keycloak:8080
      - D4SERVICE_OAUTH2_PORT=8080
      - D4SERVICE_OAUTH2_CLIENT_ID=d4-client
      - D4SERVICE_OAUTH2_CLIENT_SECRET=1f02bb76-eb58-40e2-928d-13f5c35794c1
      - D4SERVICE_OAUTH2_ISSUER=http://keycloak:8080/auth/realms/{{cookiecutter.d4service_oauth2_auth_realm}}
      - D4SERVICE_OAUTH2_AUTH_ENDPOINT=http://127.0.0.1:8080/auth/realms/{{cookiecutter.d4service_oauth2_auth_realm}}/protocol/openid-connect/auth
      - D4SERVICE_OAUTH2_TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/{{cookiecutter.d4service_oauth2_auth_realm}}/protocol/openid-connect/token
      - D4SERVICE_OAUTH2_JWKS_URI=http://keycloak:8080/auth/realms/{{cookiecutter.d4service_oauth2_auth_realm}}/protocol/openid-connect/certs
      - D4SERVICE_OAUTH2_USERINFO_ENDPOINT=http://keycloak:8080/auth/realms/{{cookiecutter.d4service_oauth2_auth_realm}}/protocol/openid-connect/userinfo
      - D4SERVICE_OPA_URI=http://opa:8181
      - D4SERVICE_OPA_PORT=8181
      - D4SERVICE_CACHE_URI=http://127.0.0.1:{{cookiecutter.d4service_cache_port}}
      # Allow explicit env var override for tests
    ports:
      - "${D4SERVICE_CACHE_PORT}:${D4SERVICE_CACHE_PORT}"
{%- endif %}



{%- if cookiecutter.enable_mq == "y" %}
# ---------------------------------------------------------------------------
  mq:
    image: '${DOCKER_IMAGE_MQ}'
    env_file:
      - envs/local/mq
    ports:
      - "${D4SERVICE_MQ_PORT}:${D4SERVICE_MQ_PORT}"
      - "${D4SERVICE_MQ_ADMIN_PORT}:${D4SERVICE_MQ_ADMIN_PORT}"
    volumes:
      - local_mq_data:/var/lib/rabbitmq
      - local_mq_log:/var/log/rabbitmq
{%- endif %}



{%- if cookiecutter.enable_mq_ui == "y" %}
# ---------------------------------------------------------------------------
  mq_ui:
    image: '${DOCKER_IMAGE_MQ_UI}'
    build:
      context: ./{{cookiecutter.d4service_mq_worker_slug}}
      dockerfile: ../compose/local/mq_ui/Dockerfile
    env_file:
      - envs/local/mq_ui
    ports:
      - "${D4SERVICE_MQ_UI_PORT}:5555"
    command: celery -A main.celery flower
    volumes:
      - ./{{cookiecutter.d4service_mq_worker_slug}}/worker:/data
    depends_on:
      - mq
      - mq_db
      - {{cookiecutter.d4service_mq_worker_slug}}
{%- endif %}



{%- if cookiecutter.enable_mq_worker == "y" %}
# ---------------------------------------------------------------------------
  {{cookiecutter.d4service_mq_worker_slug}}:
    image: '${DOCKER_IMAGE_MQ_WORKER}'
    build:
      context: ./{{cookiecutter.d4service_mq_worker_slug}}
      dockerfile: ../compose/local/{{cookiecutter.d4service_mq_worker_slug}}/python3.9-slim.dockerfile
    environment:
      - LOG_LEVEL=debug
    env_file:
      - envs/local/{{cookiecutter.d4service_mq_worker_slug}}
    volumes:
      - ./{{cookiecutter.d4service_mq_worker_slug}}/worker:/worker:w
    command: celery -A main.celery worker -B --loglevel=info
    depends_on:
      - mq
      - mq_db
{%- endif %}



{%- if cookiecutter.enable_mq_db == "y" %}
# ---------------------------------------------------------------------------
  mq_db:
    image: '${DOCKER_IMAGE_MQ_DB}'
    build:
      context: .
      dockerfile: ./compose/local/mq_db/Dockerfile
    volumes:
      - local_mq_db_data:/var/lib/postgresql/data/
    ports:
      - "${D4SERVICE_MQ_DB_PORT}:${D4SERVICE_MQ_DB_PORT}"
    env_file:
      - envs/local/mq_db
{%- endif %}



{%- if cookiecutter.enable_postgres == "y" %}
# ---------------------------------------------------------------------------
  postgres:
    image: {{ cookiecutter.project_slug }}_production_postgres
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    volumes:
      - local_postgres_data:/var/lib/postgresql/data:Z
      - local_postgres_data_backups:/backups:z
    ports:
      - "5432:5432"
    env_file:
      - envs/local/postgres
{%- endif %}



{%- if cookiecutter.enable_proxy == "y" %}
# ---------------------------------------------------------------------------
  proxy:
    image: {{ cookiecutter.docker_image_proxy }}
    build:
      context: .
      dockerfile: ./compose/local/proxy/nginx.dockerfile
    restart: always
    volumes:
      - ./proxy/config/conf.d/local:/etc/nginx/conf.d/:rw
      - ./proxy/certbot/www:/var/www/certbot/:ro
      - ./proxy/certbot/conf/:/etc/nginx/ssl/:ro
    ports:
      - "${D4SERVICE_PROXY_HTTP_PORT}:80"
      - "${D4SERVICE_PROXY_HTTPS_PORT}:443"
    env_file:
      - envs/local/proxy
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
{%- endif %}



{%- if cookiecutter.enable_proxy_cert_manager == "y" %}
# ---------------------------------------------------------------------------
  cert_manager:
    image: {{ cookiecutter.docker_image_proxy_cert_manager }}
    build:
      context: .
      dockerfile: ./compose/local/proxy/certbot.dockerfile
    restart: always
    volumes:
        - ./proxy/certbot/www/:/var/www/certbot/:rw
        - ./proxy/certbot/conf/:/etc/letsencrypt/:rw
    entrypoint: "/bin/sh -c 'trap exit TERM; crond -f'"
{%- endif %}



{%- if cookiecutter.enable_spot == "y" %}
# ---------------------------------------------------------------------------
  spot:
    image: {{ cookiecutter.project_slug }}_local_django
    build:
      context: .
      dockerfile: ./compose/local/spot/Dockerfile
    depends_on:
      {%- if cookiecutter.enable_postgres == "y" %}
      - postgres
      {%- endif +%}
      {%- if cookiecutter.enable_test_keycloak == "y" %}
      - keycloak
      {%- endif +%}
    volumes:
      - ./spot/app:/app:z
    env_file:
      - envs/local/spot
      - envs/local/postgres
    environment:
      - LOG_LEVEL=debug
      - D4SERVICE_OAUTH2_CLIENT_ID=d4-client
      - D4SERVICE_OAUTH2_CLIENT_SECRET=1f02bb76-eb58-40e2-928d-13f5c35794c1
      - D4SERVICE_OAUTH2_AUTH_ENDPOINT=http://127.0.0.1:8080/auth/realms/{{cookiecutter.d4service_oauth2_auth_realm}}/protocol/openid-connect/auth
      - D4SERVICE_OAUTH2_TOKEN_ENDPOINT=http://keycloak:8080/auth/realms/{{cookiecutter.d4service_oauth2_auth_realm}}/protocol/openid-connect/token
      - D4SERVICE_OAUTH2_JWKS_URI=http://keycloak:8080/auth/realms/{{cookiecutter.d4service_oauth2_auth_realm}}/protocol/openid-connect/certs
    ports:
      - "${D4SERVICE_SPOT_PORT}:${D4SERVICE_SPOT_PORT}"
    command: /start
{%- endif %}
